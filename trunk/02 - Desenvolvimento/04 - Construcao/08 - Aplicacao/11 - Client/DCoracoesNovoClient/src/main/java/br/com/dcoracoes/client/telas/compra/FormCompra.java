/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FormCompra.java
 *
 * Created on 24/05/2012, 00:16:20
 */
package br.com.dcoracoes.client.telas.compra;

import br.com.dcoracoes.client.ControleAcesso;
import br.com.dcoracoes.client.enuns.Enum_Tipo_Codigo;
import br.com.dcoracoes.client.interfaces.InterfaceCadastroCompleto;
import br.com.dcoracoes.client.swingworker.SwingWorkerPedidoCompra;
import br.com.dcoracoes.client.telas.principal.FormPrincipal;
import br.com.dcoracoes.client.telas.produto.FormConsultaProduto;
import br.com.dcoracoes.client.telas.produto.FormProduto;
import br.com.dcoracoes.client.util.LogUtil;
import br.com.dcoracoes.client.util.MensagensUtil;
import br.com.dcoracoes.client.util.MetodosUtil;
import br.com.dcoracoes.client.util.message.MessageCompra;
import br.com.dcoracoes.servico.service.*;
import br.com.wedesenv.common.date.DateUtil;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Cl√©berson
 */
public class FormCompra extends javax.swing.JFrame implements InterfaceCadastroCompleto{
    
    private FormPrincipal form = null;
    private PedidoCompra pedido;
    private HashMap<Integer, Produto> lstProduto;
    private HashMap<Integer, ItemProduto> lstItemProduto;
    private FormConsultaProduto formProduto;

    public PedidoCompra getPedido() {
        return pedido;
    }

    public void setPedidoCompra(PedidoCompra pedido) {
        this.pedido = pedido;        
    }

    /** Creates new form FormCompra */
    public FormCompra(FormPrincipal form) {
        this.form = form;
        initComponents();        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelSuperButton = new javax.swing.JPanel();
        btnNovo = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        btnExcluir = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        btnSalvar = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        btnPesquisar = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        txtFornecedor = new javax.swing.JFormattedTextField();
        jtxtData = new javax.swing.JFormattedTextField();
        jPanel3 = new javax.swing.JPanel();
        btnSalvarPDF = new javax.swing.JButton();
        btnImprimirExpedicao = new javax.swing.JButton();
        btnImprimirCompleto = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableItemCompra = new JTable();
        jLabel30 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jtxtSubTotal = new javax.swing.JTextField();
        jtxtValorDescontoDinheiro = new javax.swing.JTextField();
        jtxtTotal = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        jtxtValorDescontoPorcentagem = new javax.swing.JTextField();
        btnRemoverItem = new javax.swing.JButton();
        btnNovoItem = new javax.swing.JButton();
        txtTotalItems = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        cbTipoCodigo = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Compra");
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage("src/main/resources/imagens/outras/icon_SGC.gif"));
        setResizable(false);

        panelSuperButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, null, null, new java.awt.Color(43, 115, 186)));

        btnNovo.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/32x32/document-new.png"))); // NOI18N
        btnNovo.setText("NOVO");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnSair.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/32x32/sair32x32.png"))); // NOI18N
        btnSair.setText("SAIR");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        jPanel5.setPreferredSize(new java.awt.Dimension(40, 60));
        jPanel5.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel7.setPreferredSize(new java.awt.Dimension(40, 60));
        jPanel7.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnExcluir.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/32x32/img_deletar_32x32.png"))); // NOI18N
        btnExcluir.setText("Excluir");
        btnExcluir.setEnabled(false);
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        jPanel12.setPreferredSize(new java.awt.Dimension(40, 60));
        jPanel12.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnSalvar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/32x32/img_salvar_32x32.png"))); // NOI18N
        btnSalvar.setText("SALVAR");
        btnSalvar.setEnabled(false);
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        jPanel13.setPreferredSize(new java.awt.Dimension(40, 60));
        jPanel13.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        btnPesquisar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/32x32/system-search.png"))); // NOI18N
        btnPesquisar.setText("PESQUISAR");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSuperButtonLayout = new javax.swing.GroupLayout(panelSuperButton);
        panelSuperButton.setLayout(panelSuperButtonLayout);
        panelSuperButtonLayout.setHorizontalGroup(
            panelSuperButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuperButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelSuperButtonLayout.setVerticalGroup(
            panelSuperButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuperButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSuperButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(btnExcluir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(btnPesquisar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSair, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNovo))
                .addContainerGap())
        );

        jLabel34.setText("FORNECEDOR:");

        jLabel35.setText("DATA:");

        txtFornecedor.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtFornecedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFornecedorKeyReleased(evt);
            }
        });

        jtxtData.setEditable(false);
        jtxtData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        jtxtData.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jtxtData.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        btnSalvarPDF.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnSalvarPDF.setText("<html> <center>SALVAR<br/>PDF</center> <html>");
        btnSalvarPDF.setEnabled(false);

        btnImprimirExpedicao.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnImprimirExpedicao.setText("<html> <center>IMPRIMIR<br/>EXPEDI√á√ÉO</center> <html>");
        btnImprimirExpedicao.setEnabled(false);
        btnImprimirExpedicao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirExpedicaoActionPerformed(evt);
            }
        });

        btnImprimirCompleto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnImprimirCompleto.setText("<html> <center>IMPRIMIR<br/>COMPLETO</center> <html>");
        btnImprimirCompleto.setEnabled(false);
        btnImprimirCompleto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirCompletoActionPerformed(evt);
            }
        });

        tableItemCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, "0"}
            },
            new String [] {
                "Ref. Cat√°logo", "Cor", "Quantidade", "Descri√ß√£o", "Valor Unit√°rio", "Valor Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableItemCompra);
        tableItemCompra.getColumnModel().getColumn(0).setMinWidth(150);
        tableItemCompra.getColumnModel().getColumn(0).setPreferredWidth(150);
        tableItemCompra.getColumnModel().getColumn(0).setMaxWidth(150);
        tableItemCompra.getColumnModel().getColumn(1).setMinWidth(100);
        tableItemCompra.getColumnModel().getColumn(1).setPreferredWidth(100);
        tableItemCompra.getColumnModel().getColumn(1).setMaxWidth(100);
        tableItemCompra.getColumnModel().getColumn(2).setMinWidth(100);
        tableItemCompra.getColumnModel().getColumn(2).setPreferredWidth(100);
        tableItemCompra.getColumnModel().getColumn(2).setMaxWidth(100);
        tableItemCompra.getColumnModel().getColumn(4).setMinWidth(100);
        tableItemCompra.getColumnModel().getColumn(4).setPreferredWidth(100);
        tableItemCompra.getColumnModel().getColumn(4).setMaxWidth(100);
        tableItemCompra.getColumnModel().getColumn(5).setMinWidth(100);
        tableItemCompra.getColumnModel().getColumn(5).setPreferredWidth(100);
        tableItemCompra.getColumnModel().getColumn(5).setMaxWidth(100);

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel30.setText("TOTAL DE ITENS NO PEDIDO");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel31.setText("SUB-TOTAL");

        jLabel32.setText("DESCONTO em R$");

        jLabel33.setText("TOTAL");

        jtxtSubTotal.setEditable(false);

        jtxtValorDescontoDinheiro.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtValorDescontoDinheiroFocusLost(evt);
            }
        });

        jtxtTotal.setEditable(false);

        jLabel36.setText("DESCONTO em %");

        jtxtValorDescontoPorcentagem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtxtValorDescontoPorcentagemFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel31)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                            .addGap(8, 8, 8)))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel32, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtxtTotal, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(jtxtValorDescontoDinheiro, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(jtxtValorDescontoPorcentagem, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(jtxtSubTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(jtxtSubTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jtxtValorDescontoPorcentagem, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(jtxtValorDescontoDinheiro, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(jtxtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnRemoverItem.setText("Remover Item");
        btnRemoverItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoverItemActionPerformed(evt);
            }
        });

        btnNovoItem.setText("Novo Item");
        btnNovoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoItemActionPerformed(evt);
            }
        });

        txtTotalItems.setEditable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel24.setText("ALTERAR CABE√áALHO:");

        jLabel25.setText("PROCURA PRODUTO:");

        jLabel28.setText("F4");

        jLabel29.setText("F5");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel29)
                    .addComponent(jLabel28))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel29))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cbTipoCodigo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Ref. Cat√°logo", "C√≥d. Fornecedor", "C√≥d. Barras", "C√≥d. ProFiscal", "C√≥d. ForFiscal" }));
        cbTipoCodigo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbTipoCodigoItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(cbTipoCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(533, 533, 533)
                .addComponent(btnRemoverItem)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(btnNovoItem))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(txtTotalItems, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnImprimirCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)
                        .addComponent(btnImprimirExpedicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(btnSalvarPDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)))
                .addGap(16, 16, 16)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 890, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoverItem)
                    .addComponent(btnNovoItem)
                    .addComponent(cbTipoCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(txtTotalItems, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel30))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnImprimirCompleto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnImprimirExpedicao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(btnSalvarPDF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addContainerGap()))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtxtData, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelSuperButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(panelSuperButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(txtFornecedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(jtxtData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRemoverItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoverItemActionPerformed
        // TODO add your handling code here:
        removeCor();
}//GEN-LAST:event_btnRemoverItemActionPerformed

    private void btnNovoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoItemActionPerformed
        popularGrid(new ItemPedido());
    }//GEN-LAST:event_btnNovoItemActionPerformed

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        // TODO add your handling code here:
        createNew();
}//GEN-LAST:event_btnNovoActionPerformed

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        // TODO add your handling code here:
        salvar();
}//GEN-LAST:event_btnSalvarActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        // TODO add your handling code here:
        close();
}//GEN-LAST:event_btnSairActionPerformed

    private void txtFornecedorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFornecedorKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFornecedorKeyReleased

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        // TODO add your handling code here:
        search();
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void jtxtValorDescontoPorcentagemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtValorDescontoPorcentagemFocusLost
        // TODO add your handling code here:
        calcValorDesconto(Float.parseFloat(jtxtSubTotal.getText()), 
                jtxtValorDescontoPorcentagem.getText(), 
                "");
    }//GEN-LAST:event_jtxtValorDescontoPorcentagemFocusLost

    private void jtxtValorDescontoDinheiroFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtxtValorDescontoDinheiroFocusLost
        // TODO add your handling code here:
        calcValorDesconto(Float.parseFloat(jtxtSubTotal.getText()), 
                "", 
                jtxtValorDescontoDinheiro.getText());
    }//GEN-LAST:event_jtxtValorDescontoDinheiroFocusLost

    private void btnImprimirCompletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirCompletoActionPerformed
//        try {
//            GerarRelatorio gerar = new GerarRelatorio();
//            gerar.gerarRelatorioCompletoCompra(pedido);
//            
//        } catch (JRException ex) {
//            LogUtil.logDescricaoErro(this.getClass(), ex);
//            JOptionPane.showMessageDialog(this, ex.getMessage(), MensagensUtil.ERRO, 0);
//        }
    }//GEN-LAST:event_btnImprimirCompletoActionPerformed

    private void btnImprimirExpedicaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirExpedicaoActionPerformed
//        try {
//            GerarRelatorio gerar = new GerarRelatorio();
//            gerar.gerarRelatorioExpedicaoCompra(pedido);
//            
//        } catch (JRException ex) {
//            Logger.getLogger(FormCompra.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnImprimirExpedicaoActionPerformed

    private void cbTipoCodigoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbTipoCodigoItemStateChanged
        // TODO add your handling code here:
        tableItemCompra.getColumnModel().getColumn(0).setHeaderValue(cbTipoCodigo.getSelectedItem().toString());        
        tableItemCompra.getTableHeader().resizeAndRepaint();
    }//GEN-LAST:event_cbTipoCodigoItemStateChanged

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnExcluirActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnImprimirCompleto;
    private javax.swing.JButton btnImprimirExpedicao;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnNovoItem;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnRemoverItem;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSalvarPDF;
    private javax.swing.JComboBox cbTipoCodigo;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField jtxtData;
    private javax.swing.JTextField jtxtSubTotal;
    private javax.swing.JTextField jtxtTotal;
    private javax.swing.JTextField jtxtValorDescontoDinheiro;
    private javax.swing.JTextField jtxtValorDescontoPorcentagem;
    private javax.swing.JPanel panelSuperButton;
    private javax.swing.JTable tableItemCompra;
    private javax.swing.JFormattedTextField txtFornecedor;
    private javax.swing.JTextField txtTotalItems;
    // End of variables declaration//GEN-END:variables

    @Override
    public void createNew() {
        disableTela(true);
        clear();
        populaDataCadastro();
        txtFornecedor.requestFocus();
        
        btnImprimirCompleto.setEnabled(false);
        btnImprimirExpedicao.setEnabled(false);
//        btnSalvarPDF.setEnabled(false);
    }

    @Override
    public void edit() {
        disableTela(false);
    }

    @Override
    public void search() {
        FormConsultaCompra form = new FormConsultaCompra(true, this);
        form.setVisible(true);
    }

    @Override
    public void print() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public boolean validarTela() {
        StringBuilder stringError = new StringBuilder();
        
        //Validando item compra
        if(((DefaultTableModel) tableItemCompra.getModel()).getRowCount() > 0){
        
            StringBuilder stringErroCor = validarItemCompra();
            if(!stringErroCor.toString().isEmpty()){
                if (!stringError.toString().isEmpty()) {
                    stringError.append("\n");
                }
                stringError.append(stringErroCor);
            }
        } else {
            if (!stringError.toString().isEmpty()) {
                stringError.append("\n");
            }
            stringError.append(MessageCompra.CAMPO_ITEMS_PEDIDO_OBRIGATORIO);
        }
        
        if (!stringError.toString().isEmpty()) {
            JOptionPane.showMessageDialog(this, stringError, MensagensUtil.ATENCAO, 2);
        }

        return stringError.toString().isEmpty();
    }

    @Override
    public void pushToModel() {
        if (pedido == null) {
            pedido = new PedidoCompra();
        }
        
        //TESTE REMOVER
        pedido.setCodigo("123");
        
                    
        if (!txtFornecedor.getText().isEmpty()) {
            Fornecedor fornecedor = new Fornecedor();
            fornecedor.setPessoa(new Pessoa());
            fornecedor.getPessoa().setNome(txtFornecedor.getText().trim());
            pedido.setFornecedor(fornecedor);
        } else
            pedido.setFornecedor(null);
                    
        if (!jtxtData.getText().isEmpty()) {
            pedido.setDataPedido(DateUtil.dateAsXMLGregorianCalendar((Date)jtxtData.getValue()));
        } else
            pedido.setDataPedido(null);
        
        pedido.setSubTotal(Float.parseFloat(jtxtSubTotal.getText()));
        pedido.setDescontoPorcentagem(Float.parseFloat(jtxtValorDescontoPorcentagem.getText()));
        pedido.setDescontoDinheiro(Float.parseFloat(jtxtValorDescontoDinheiro.getText()));
        pedido.setTotal(Float.parseFloat(jtxtTotal.getText()));
        
        
        pushToModelItemPedido();
        
    }

    @Override
    public void popularTela() {
        clear();        
             
        for (ItemPedido item : pedido.getListaItensPedido()) {
            popularGrid(item);
        }
        
        if(pedido.getFornecedor() != null)
            txtFornecedor.setText(pedido.getFornecedor().getPessoa().getNome());
        jtxtData.setValue(DateUtil.asDate(pedido.getDataPedido()));
        
        atualizaTotais();
        
        jtxtSubTotal.setText(pedido.getSubTotal()+"");
        jtxtValorDescontoPorcentagem.setText(pedido.getDescontoPorcentagem() + "");
        jtxtValorDescontoDinheiro.setText(pedido.getDescontoDinheiro() + "");
        jtxtTotal.setText(pedido.getTotal()+"");
           
    }

    @Override
    public void salvar() {
        try {
            if(validarTela()){
                pushToModel();
                mantemPedido(pedido);
            }
        } catch (java.lang.Exception ex) {
            LogUtil.logDescricaoErro(this.getClass(), ex);
            JOptionPane.showMessageDialog(this, MessageCompra.ERRO_SALVAR_PEDIDO, MensagensUtil.ERRO, 0);
        }
    }

    public void salvarComSucesso() {
        popularTela();        
        JOptionPane.showMessageDialog(this, MensagensUtil.MENSAGEM_SUCESSO_CADASTRO, MensagensUtil.SUCESSO, 1);
        disableTela(false);
        btnSalvar.setEnabled(false);
        btnImprimirCompleto.setEnabled(true);
        btnImprimirExpedicao.setEnabled(true);             
    }
    
    
    @Override
    public void close() {
        if (!btnSalvar.isEnabled()) {
            fecharForm();
        } else {
            int opcao = JOptionPane.showOptionDialog(rootPane, MensagensUtil.MENSAGEM_CONFIRMAR_SAIR, MensagensUtil.ATENCAO,  
                JOptionPane.YES_NO_OPTION,  
                JOptionPane.QUESTION_MESSAGE, null, new String[]{"Sim", "N√£o"}, "N√£o"); 
            if (opcao == JOptionPane.YES_OPTION) {
                fecharForm();
            }
        }
    }
    
    private void fecharForm(){        
        clear();
        this.dispose();
        form.setFormCompra(null);
    }

    @Override
    public void initialize() {
        
        //ocultando o bot√£o Remover Item
        btnRemoverItem.setVisible(false);
        btnSalvarPDF.setVisible(false);
        
        //inicialiando os dados base
        createNew();
        initializeList();        
        
        //evento de inser√ß√£o de tados na grid de item
        tableItemCompra.getModel().addTableModelListener(new TableModelListener() {

            @Override
            public void tableChanged(TableModelEvent e) {
                boolean aux = false;
                /**
                 * trata eventos de codigos
                 */
                int row = tableItemCompra.getSelectedRow();
                DefaultTableModel dtm = (DefaultTableModel) tableItemCompra.getModel();
                if(e.getColumn() == 0){
                    String codigo = dtm.getValueAt(row, 0).toString();
                    if(!codigo.isEmpty()){
                        buscarProduto(codigo,row);                        
                        aux = true;
                    } else {
                        atualizaTableDadosProduto(new Produto(), row);
                        tableItemCompra.getModel().setValueAt(null, row, 1);
                        tableItemCompra.getModel().setValueAt(0, row, 2);
                    }
                } else{
                    /**
                     * trata evento de quantidade
                     */
                    if(e.getColumn() == 2){
                        atualizaValorTotalItemProduto(row);
                        
                        aux = true;
                    } else {
                        /**
                         * trata evento de cor
                         */
                        if(e.getColumn() == 1){
                            aux = true;
                        }
                    }
                }
                
                /**
                 * atualiza total de acordo com os items da grid
                 */
                atualizaTotais();
                
                if(aux)
                    if(dtm.getValueAt(row, 1) != null)
                            if(!dtm.getValueAt(row, 1).toString().isEmpty()){
                                String cor = dtm.getValueAt(row, 1).toString();
                                int quantidadeItem = ((Integer)tableItemCompra.getModel().getValueAt(row, 2)).intValue();
                                atualizaCor(cor, quantidadeItem, row);
                            }
            }

        });

        //pular de campo com enter
        MetodosUtil.enterPularCampos(this);
        //define letras maiusculas
        MetodosUtil.letrasMaiusculas(this.getContentPane()); 

        //Logica para fechar tela pela botao do frame
        addListenerParaExibirMgsFecharTela();

        //Inicializa Acesso
        this.inicializaAcessoPorPerfil();        
        
        //adicionando atalhos
        createAtalhos();
    }
    
    private void initializeList(){
        for (int i = 0; i < 13; i++) {
            popularGrid(new ItemPedido());
        }
    }
    
    /**
     * valida e atualiza itemProduto 
     * @param cor
     * @param row 
     */
    private void atualizaCor(String cor, int quantidade, int row) {
        ItemProduto itemProduto = null;
        boolean erro = false;
        if(lstProduto != null){
            if(lstProduto.containsKey(row)){
                Produto produto = lstProduto.get(row);          
                for (ItemProduto item : produto.getListaItensProduto()) {
                    if(item.getCor().getCodigo().equalsIgnoreCase(cor)){
                        itemProduto = item;
                        break;
                    }
                }


                if(itemProduto != null){
                    if(lstItemProduto == null)
                        lstItemProduto = new HashMap<Integer, ItemProduto>();    

                    lstItemProduto.put(row, itemProduto);
                    
                } else {
                    String 
                    msgErro = MessageCompra.ERRO_COR_NAO_EXISTE;
                    tableItemCompra.getModel().setValueAt(null, row, 1);                    

                    JOptionPane.showMessageDialog(this, msgErro, MensagensUtil.ATENCAO, 1);
                }
            }
        }

    }
    
    /**
     * atualiza lista de produtos selecionado na grid
     * passando produto como null √© removido o produto na possicao informada
     * @param produto
     * @param possicao 
     */
    private void atualizaListProdutos(Produto produto, int possicao) {
        if(lstProduto == null)
            lstProduto = new HashMap<Integer, Produto>();
                
        if(produto == null)
            lstProduto.remove(possicao);

        lstProduto.put(possicao, produto);
    }
    
    /**
     * atualizaTotais
     */
    private void atualizaTotais(){
        //atualiza total de items
        int row = tableItemCompra.getModel().getRowCount();
        int totalQuantidade = 0;
        //atualiza sub-total
        float subTotal = 0;
        for(int i = 0; i < row; i++){
            if(tableItemCompra.getModel().getValueAt(i, 2) != null)
                totalQuantidade += ((Integer)tableItemCompra.getModel().getValueAt(i, 2)).intValue();
            subTotal += Float.parseFloat(tableItemCompra.getModel().getValueAt(i, 5).toString());
        }


        txtTotalItems.setText(totalQuantidade+"");
        
        
        jtxtSubTotal.setText(subTotal+"");
        calcValorDesconto(subTotal, jtxtValorDescontoPorcentagem.getText(), jtxtValorDescontoDinheiro.getText());
    }
    
    /**
     * Calcula o valor do desconto da venda
     * @param subTotal
     * @return 
     */
    private void calcValorDesconto(float subTotal, String porc, String dinh) {      
                
        float descontoPorcentagem = 0;
        int porcentagem = 0;
        float descontoDinheiro = 0;
        float total = 0;
        
        if(!porc.isEmpty()){
            if(!porc.equalsIgnoreCase("0")){            
                descontoPorcentagem = Float.parseFloat(porc);
                descontoPorcentagem = descontoPorcentagem / 100;
                descontoDinheiro  = subTotal * descontoPorcentagem;
                
                descontoPorcentagem = descontoPorcentagem * 100;
            }
            
            
        }
        if(!dinh.isEmpty()){
                if(!dinh.equalsIgnoreCase("0.0")){
                    float dinheiro = Float.parseFloat(dinh);
                    descontoDinheiro = dinheiro;
                    descontoPorcentagem = (descontoDinheiro*100) / subTotal;
                    porcentagem = Integer.parseInt((descontoPorcentagem+"").replace(".", ""));
                }
        }
        
        total = subTotal - descontoDinheiro;
            
        jtxtValorDescontoPorcentagem.setText(descontoPorcentagem + "");
        jtxtValorDescontoDinheiro.setText(descontoDinheiro + "");
        jtxtTotal.setText(total + "");

    }
    
    /**
     * Calcula o valor total com desconto
     * @param subTotal
     * @param valorDesconto
     * @return 
     */
    private float calcValorTotal(float subTotal, float valorDesconto) {        
        return subTotal - valorDesconto;
    }

    @Override
    public void clear() {
        lstProduto = null;
        lstItemProduto = null;
        txtFornecedor.setText(null);
        jtxtData.setText(null);
        
        clearItemsPedido();
    }
    
    /**
     * popula o campo data cadastro com a data corrente
     */
    private void populaDataCadastro() {
        jtxtData.setValue(Calendar.getInstance().getTime());
    }
        
    /*************************************************
     * Limpar Campos  *INICIO*
     *************************************************/
        
    private void clearItemsPedido(){
        txtTotalItems.setText(null);
        jtxtSubTotal.setText(null);
        jtxtValorDescontoDinheiro.setText(null);
        jtxtValorDescontoPorcentagem.setText(null);
        jtxtTotal.setText(null);        
        limparGrid();
    }
    
    /**
     * limpa os dados da grid
     */
    private void limparGrid(){
        DefaultTableModel dtm = (DefaultTableModel) tableItemCompra.getModel();
        int x = dtm.getRowCount();  
        
        ItemPedido aux = new ItemPedido();
        for(int a = 0; a < x; a++)  
        {  
            dtm.removeRow(a); 

            float valorTotal = aux.getQuantidade() * aux.getValorUnitario();   
            String codigo = "";
            if(aux.getCodigo() != null)
                codigo = aux.getCodigo().getCodigo();
            dtm.insertRow(a, new Object[]{
                    codigo,
                    aux.getCor(),
                    aux.getQuantidade(),
                    aux.getDescricao(),
                    aux.getValorUnitario(),
                    valorTotal + ""
                 });
        }  
    }
    /*************************************************
     * Limpar Campos  *FIM*
     *************************************************/
        
    /***************************************
     * Grid Items de compra *INICIO*
     ***************************************/
    
    
    /**
     * Valida campos obrigat√≥rios do item de compra
     * @return 
     */
    private StringBuilder validarItemCompra(){
        DefaultTableModel dtm = (DefaultTableModel) tableItemCompra.getModel();
        if(dtm.getRowCount() == 0)
            return new StringBuilder();
        
        
        boolean validCor = false, validQuantidade = false;
        for (int i = 0; i < dtm.getRowCount(); i++) {
            if(!dtm.getValueAt(i, 0).toString().isEmpty()){
                if(dtm.getValueAt(i, 1) == null || dtm.getValueAt(i, 1).toString().isEmpty()){
                    validCor = true;
                }

                if(dtm.getValueAt(i, 2) == null || ((Integer)dtm.getValueAt(i, 2)).intValue() == 0){
                    validQuantidade = true;
                }
            }
            
            if(validCor && validQuantidade)
                break;
        }
               
        
        StringBuilder stringError = new StringBuilder();
        
        if(validCor)
            stringError.append(MessageCompra.COLUNA_COR_OBRIGATORIO);
        if(validQuantidade){
            if(validCor)
                stringError.append("\n");
            
            stringError.append(MessageCompra.COLUNA_QUANTIDADE_OBRIGATORIO);
        }
        
        return stringError;
    }
    
    /**
     * popula a grid
     * @param aux 
     */
    private void popularGrid(ItemPedido aux){
        
        DefaultTableModel dtm = (DefaultTableModel) tableItemCompra.getModel();
        
        float valorTotal = aux.getQuantidade() * aux.getValorUnitario();   
        String codigo = "";
        if(aux.getCodigo() != null)
            codigo = aux.getCodigo().getCodigo();
        
        if(codigo.isEmpty()){
            dtm.addRow(new Object[]{
                        codigo,
                        aux.getCor(),
                        aux.getQuantidade(),
                        aux.getDescricao(),
                        aux.getValorUnitario(),
                        valorTotal + ""
                     });
            
        } else{
            int row = recProximaLinhaVazia(dtm);
            dtm.removeRow(row);
            dtm.insertRow(row, new Object[]{
                        codigo,
                        aux.getCor(),
                        aux.getQuantidade(),
                        aux.getDescricao(),
                        aux.getValorUnitario(),
                        valorTotal + ""
                     });
        }
    }
    
    /**
     * Recupera a proxima possi√ß√£o da grid para inserir o novo objeto
     * @param dtm
     * @return 
     */
    private int recProximaLinhaVazia(DefaultTableModel dtm){
                
        int value = 0;
        for (int i = 0; i < dtm.getRowCount(); i++) {
            if(dtm.getValueAt(i, 0).toString().isEmpty()){
                value = i;            
                break;
            }
        }
        
        return value;
    }
    
    /**
     * metodo para remover o item selecionado
     */
    private void removeCor(){
        try {        
            
            JTable table = tableItemCompra;
            int row = table.getSelectedRow();

            DefaultTableModel dtm = (DefaultTableModel) table.getModel();
            dtm.removeRow(row);
                
        } catch (java.lang.Exception ex) {
            Logger.getLogger(FormCompra.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, MessageCompra.ERRO_REMOVER_ITEM, MensagensUtil.ERRO, 0);
        }
        
        JOptionPane.showMessageDialog(this, MessageCompra.SUCESSO_REMOVER_ITEM, MensagensUtil.SUCESSO, 1);
    }
    
    /**
     *Recupera os items de pedido da grid
     */
    private void pushToModelItemPedido() {
        
        //Para a edi√ß√£o na tabela
        tableItemCompra.getDefaultEditor(String.class).stopCellEditing();
        
        if(pedido == null)
            pedido = new PedidoCompra();        
        
        DefaultTableModel dtm = (DefaultTableModel) tableItemCompra.getModel();
        int x = dtm.getRowCount();  
        for(int i = 0; i < x; i++)  
        {  
            if(dtm.getValueAt(i, 0).toString().isEmpty()){
               continue; 
            }
            
            ItemPedido itemPedido = returnObjListPositionGrid(pedido.getListaItensPedido(), i);
            itemPedido.setIdItemProduto(lstItemProduto.get(i).getId());
            if(dtm.getValueAt(i, 0) != null){
                CodigoItem cod = new CodigoItem();
                cod.setCodigo(dtm.getValueAt(i, 0).toString());
                cod.setTipo(Enum_Tipo_Codigo.REFERENCIA_CATALOGO.getCodigo());
                itemPedido.setCodigo(cod);
            } else
                itemPedido.setCodigo(null);
            
            if(dtm.getValueAt(i, 1) != null)
                itemPedido.setCor(dtm.getValueAt(i, 1).toString());
            else
                itemPedido.setCodigo(null);
            
            itemPedido.setQuantidade(Integer.parseInt(dtm.getValueAt(i, 2).toString()));
            itemPedido.setDescricao(dtm.getValueAt(i, 3).toString());
            itemPedido.setValorUnitario(Float.parseFloat(dtm.getValueAt(i, 4).toString()));
            itemPedido.setValorTotal(Float.parseFloat(dtm.getValueAt(i, 5).toString()));
            
            if(pedido.getListaItensPedido().contains(itemPedido)){
                pedido.getListaItensPedido().remove(itemPedido);
                pedido.getListaItensPedido().add(i,itemPedido);
            }
            else
                pedido.getListaItensPedido().add(itemPedido);
        }
    }
    
    private ItemPedido returnObjListPositionGrid(List<ItemPedido> list, int position){
        
        if(list.isEmpty() || list.size() <= position)
            return new ItemPedido();
        
        return list.get(position);
    }
    
    

    /**
     * Busca produto pelo codigo passado
     */
    private void buscarProduto(String codigo, int row) {  
          
        Produto produto = new Produto();
        
            if(cbTipoCodigo.getSelectedIndex() == 0)
                produto.setReferenciaCatalogo(codigo);
            else
                if(cbTipoCodigo.getSelectedIndex() == 1){
                    Fornecedor fornecedor = new Fornecedor();
                    fornecedor.setCodigo(codigo);
                    produto.setFornecedor(fornecedor);
                } else
                    if(cbTipoCodigo.getSelectedIndex() == 2)
                        produto.setCodigoBarra(codigo);
                    else
                        if(cbTipoCodigo.getSelectedIndex() == 3)
                            produto.setCodigoProFiscal(codigo);
                        else
                            if(cbTipoCodigo.getSelectedIndex() == 4)
                                produto.setCodigoForFiscal(codigo);

           
            //chama worker
            SwingWorkerPedidoCompra work = new SwingWorkerPedidoCompra();
            work.setProdutoPedidoCompra(produto);
            work.setFormCompra(this);
            work.setRowProduto(row);
            work.workSearchProdutos.execute();
                
    }
    
    public void returnListProduto(List<Produto> list, int row) {
        
        Produto produto = null;
        
        if (list.isEmpty()) {          
            JOptionPane.showMessageDialog(this, MessageCompra.CODIGO_INVALIDO, MensagensUtil.ATENCAO, 1);
        } else {
            produto = list.get(0);
        }       
        
        if(produto != null){
           atualizaListProdutos(produto, row);
           atualizaTableDadosProduto(produto, row);
         }
    }
    
    /**
     * Atualiza a table de items com o produto passado
     * @param produto 
     */
    private void atualizaTableDadosProduto(Produto produto, int row){        
        
        tableItemCompra.getModel().setValueAt(produto.getDescricao(), row, 3);
        tableItemCompra.getModel().setValueAt(produto.getValorCusto(), row, 4);
            
        atualizaValorTotalItemProduto(row);
        
    }
    
    private void atualizaValorTotalItemProduto(int row){
        
        if(tableItemCompra.getModel().getValueAt(row, 2) != null){
            int quantidade = ((Integer)tableItemCompra.getModel().getValueAt(row, 2)).intValue();
            float custo = ((Float)tableItemCompra.getModel().getValueAt(row, 4)).floatValue();

            float total = quantidade * custo;
            tableItemCompra.getModel().setValueAt(total+"", row, 5);
        }
    }

    /***************************************
     * Grid Items de compra *FIM*
     ***************************************/
    
    /**
     * Metodo execultado para enviar os dados para o server e realizar o cadastro
     * @param pedido
     */
    private void mantemPedido(PedidoCompra pedido) {
        SwingWorkerPedidoCompra worker = new SwingWorkerPedidoCompra();
        worker.setPedido(pedido);
        worker.setFormCompra(this);
        worker.workSalvaPedidoCompra.execute();
    }
    
    
    /**
     * metodo para desabilitar ou habilitar todos os campos da tela
     * @param b 
     */
    private void disableTela(boolean b) {
        tableItemCompra.setEnabled(b);
        btnNovoItem.setEnabled(b);
        btnRemoverItem.setEnabled(b);
        
        btnImprimirCompleto.setEnabled(b);
        btnImprimirExpedicao.setEnabled(b);
//        btnSalvarPDF.setEnabled(b);
        
        txtFornecedor.setEnabled(b);
        jtxtValorDescontoDinheiro.setEnabled(b);
        jtxtValorDescontoPorcentagem.setEnabled(b);
        
        
        btnSalvar.setEnabled(b);
    }

    /**
     * Logica para quando o usuario clicar no botao fechar do frame
     * exibir a tela de confirma√ß√£o
     */
    private void addListenerParaExibirMgsFecharTela() {
        //cancela acao do botao fechar
        setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);

        //add windowsListener sobrescrevendo o metodo windowClosing
        addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                if (e.getID() == WindowEvent.WINDOW_CLOSING) {
                    close();
                }
            }
        });
    }

    @Override
    public void inicializaAcessoPorPerfil() {
        this.btnExcluir.setEnabled(false);
        this.btnSalvar.setEnabled(ControleAcesso.ATIVA_BTN_CADASTRAR_PEDIDO_COMPRA);
        this.btnNovo.setEnabled(ControleAcesso.ATIVA_BTN_CADASTRAR_PEDIDO_COMPRA);

    }
    
    /********************************************************************************
     * monta os atalhos da tela
     */
    private void createAtalhos(){
        InputMap imap = rootPane.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);     
        imap.put(KeyStroke.getKeyStroke("F4"), "panel.buttonF4press");   
        imap.put(KeyStroke.getKeyStroke("F5"), "panel.buttonF5press"); 
        ActionMap amap = rootPane.getActionMap();  
        amap.put("panel.buttonF4press", new AlterCabecalho()); 
        amap.put("panel.buttonF5press", new SearchProduto());  
        
    }

@Override
    public void showFrame() {
        setLocationRelativeTo(null);
        initialize();
        this.setVisible(true);
    }
    
    /**
     * Logica para exibir pedido na hora da edi√ß√£o
     */
    public void editarPedidoCompra()
    {
       popularTela();
       disableTela(false);
       btnImprimirCompleto.setEnabled(true);
       btnImprimirExpedicao.setEnabled(true);
    }
    
    /**
     * tratamento do atalho para tecla F4
     */
    private class AlterCabecalho extends AbstractAction{

        @Override
        public void actionPerformed(ActionEvent e) {
            txtFornecedor.requestFocus();
        }
    }
    
    /**
     * tratamento do atalho para tecla F5
     */
    private class SearchProduto extends AbstractAction{

        @Override
        public void actionPerformed(ActionEvent e) {
            if(formProduto == null)
                formProduto = new FormConsultaProduto(false, new FormProduto());
            formProduto.setVisible(true);
        }
    }
}
